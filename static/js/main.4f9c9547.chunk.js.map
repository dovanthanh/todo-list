{"version":3,"sources":["components/TodoItem.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoItem","_this$props","this","props","item","onClick","onClickDel","TodoItemClass","url","checkComplete","react_default","a","createElement","className","src","alt","title","Component","App","state","todoItems","handleClick","e","_this","index","indexOf","setState","Object","toConsumableArray","handleClickDel","splice","_this2","id","map","src_components_TodoItem","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAwBeA,gMArBF,IAAAC,EAC+BC,KAAKC,MAAjCC,EADHH,EACGG,KAAKC,EADRJ,EACQI,QAAQC,EADhBL,EACgBK,WACjBC,EAAgB,WAChBC,EAAM,2BAKV,OAJIJ,EAAKK,gBACLF,GAAe,YACfC,EAAI,6BAGJE,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,GAIZG,EAAAC,EAAAC,cAAA,OAAKE,IAAKN,EAAIK,UAAU,OAAOR,QAAS,kBAAMA,EAAQD,IAAOW,IAAI,eACjEL,EAAAC,EAAAC,cAAA,aAAKV,KAAKC,MAAMC,KAAKY,MAArB,KACAN,EAAAC,EAAAC,cAAA,OAAKE,IAAI,yBAAyBD,UAAU,UAAUR,QAAS,kBAAKC,EAAWF,IAAOW,IAAI,wBAhBnFE,cCiDRC,6MA9CbC,MAAQ,CACNC,UAAY,CACV,CAAEJ,MAAO,SAAUP,eAAc,GACjC,CAAEO,MAAM,cAAeP,eAAc,GACrC,CAAEO,MAAM,aAAcP,eAAc,GACpC,CAAEO,MAAM,YAAaP,eAAc,OAIvCY,YAAc,SAACC,GAAM,IACXF,EAAcG,EAAKJ,MAAnBC,UACFI,EAAQJ,EAAUK,QAAQH,GAChCF,EAAUI,GAAOf,eAAiBW,EAAUI,GAAOf,cACnDc,EAAKG,SAAU,CACbN,UAAUO,OAAAC,EAAA,EAAAD,CACLP,QAITS,eAAgB,SAACP,GAAM,IAEbF,EAAcG,EAAKJ,MAAnBC,UACFI,EAAQJ,EAAUK,QAAQH,GAChCF,EAAUU,OAAON,EAAM,GACvBD,EAAKG,SAAS,CACZN,UAAUO,OAAAC,EAAA,EAAAD,CACLP,8EAIA,IAAAW,EAAA7B,KACAkB,EAAalB,KAAKiB,MAAlBC,UACP,OACEV,EAAAC,EAAAC,cAAA,OAAKoB,GAAG,WACNtB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,cACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEXO,EAAUa,IAAI,SAAC7B,EAAKoB,GAAN,OACdd,EAAAC,EAAAC,cAACsB,EAAD,CAAUC,IAAKX,EAAOpB,KAAMA,EAAMC,QAAS0B,EAAKV,YAAaf,WAAYyB,EAAKF,4BAvCxEZ,aCQEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4f9c9547.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './TodoItem.css'\nclass TodoItem extends Component {\n    render() {\n        const { item,onClick,onClickDel } = this.props;\n        var TodoItemClass = 'TodoItem';\n        var url = './assets/img/success.png';\n        if (item.checkComplete) {\n            TodoItemClass+=' complete';\n            url='./assets/img/success2.png'\n        }\n        return (\n            <div className={TodoItemClass}   >\n                {/* <Img src=''/> */}\n                {/* <Image src=\"https://icdn.dantri.com.vn/thumb_w/640/2018/5/23/net-cuoi-be-gai-9-1527053440039156820618.jpg\"/> */}\n                {/* <Image src=\"/assets/img/success2.png\"/> */}\n                <img src={url}className=\"icon\" onClick={() => onClick(item)} alt=\"icon click\"></img>\n                <p> {this.props.item.title} </p>\n                <img src='./assets/img/error.png' className=\"iconDel\" onClick={() =>onClickDel(item)} alt=\"icon delete\"></img>\n            </div>\n        );\n    }\n}\n\nexport default TodoItem;","import React, { Component } from 'react';\nimport './App.css';\nimport TodoItem from './components/TodoItem';\n\nclass App extends Component {\n  state = {\n    todoItems : [\n      { title: 'Di lam', checkComplete:true},\n      { title:'An com trua', checkComplete:true},\n      { title:'An com toi', checkComplete:false},\n      { title:'Choi game', checkComplete:false},\n    ]\n  }\n \n  handleClick = (e) => {\n    const { todoItems } = this.state;\n    const index = todoItems.indexOf(e);\n    todoItems[index].checkComplete = !todoItems[index].checkComplete;\n    this.setState ({\n      todoItems: [\n        ...todoItems\n      ]\n    })\n  }\n  handleClickDel =(e) => {\n    \n    const { todoItems } = this.state;\n    const index = todoItems.indexOf(e);\n    todoItems.splice(index,1)\n    this.setState({\n      todoItems: [\n        ...todoItems\n      ]\n    })\n  }\n  render() {\n    const {todoItems} = this.state;\n    return (\n      <div id=\"wrapper\">\n        <h1 className=\"title\"> todoList </h1>\n        <div className=\"App\">\n          {\n            todoItems.map((item,index) => \n            <TodoItem key={index} item={item} onClick={this.handleClick} onClickDel={this.handleClickDel}/>)\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}